pragma solidity ^0.8.0;
pragma abicoder v2;

contract MultiSigWallet {
    address[] public owners;
    uint vote;

    constructor(address[] memory _owners, uint _vote){
        owners = _owners;
        vote = _vote;
    }
    modifier onlyOwners(){
        bool owner = false;
        for(uint i=0; i<=owners.length; i++){
            if(owners[i] == msg.sender){
                owner = true;
            }
        } 
        require(owner == true);
        _;
    }
    
    function deposit() public payable {} 

    struct Transfer {
        uint amount;
        address payable receiver;
        uint approvals;
        bool hasBeenSent;
        uint id;
    }

    event TransferRequestCreated(uint _id, uint _amount, address _initiator, address _receiver);
    event ApprovalReceived(uint _id, uint _approvals, address _approver);
    event TransferApproved(uint _id);

    Transfer[] transferRequests;

    function createTransfer(uint _amount, address payable _receiver) public onlyOwners{
        emit TransferRequestCreated(transferRequests.length, _amount, msg.sender, _receiver);
        transferRequests.push(Transfer(_amount, _receiver, 0, false, transferRequests.length));
    }

     mapping(address => mapping(uint => bool)) approvals;

    function approve(uint _id) public onlyOwners {
    require(transferRequests[_id].hasBeenSent == false);
    require(approvals[msg.sender][_id] == false, "You already voted");

    approvals[msg.sender][_id] =true;
    transferRequests[_id].approvals++;

    emit ApprovalReceived(_id, transferRequests[_id].approvals, msg.sender);

    if(transferRequests[_id].approvals >= vote) {
        transferRequests[_id].hasBeenSent = true;
        transferRequests[_id].receiver.transfer(transferRequests[_id].amount);
        emit TransferApproved(_id);
    }
}

    function getTransferRequests() public view returns(Transfer[] memory) {
    return transferRequests;
}

    function getBalance() public view returns(uint) {
    return address(this).balance;
}
    
}
